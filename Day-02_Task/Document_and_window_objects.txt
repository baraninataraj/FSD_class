Understanding the distinction between the `document` object and the `window` object in JavaScript
is fundamental for effective web development. While they both serve as essential components in client-side scripting, 
they fulfil distinct roles and offer different functionalities. Let's explore their differences:


Document Object: 
   -Represents HTML Structure: 
     The `document` object represents the entire HTML document loaded in the browser window or tab. 
     It serves as an interface to access and manipulate the structure, content, and styling of the HTML document.

   -DOM Manipulation: 
     Through the `document` object, developers can interact with HTML elements, such as selecting elements,
      modifying their content, attributes, and styles, and handling events triggered by user interactions.

   -Hierarchical Structure:
     The `document` object follows a hierarchical structure known as the Document Object Model (DOM).
     Elements are organized in a tree-like structure, with the root being the `document` object itself
    
   -Entry Point for DOM:
     It acts as the entry point for accessing and manipulating elements within the HTML document.
     Developers can use methods like `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`,
     `querySelector()`, and `querySelectorAll()` to select specific elements.

   -Document-Level Events: 
     Events such as `DOMContentLoaded` and `load` are associated with the `document` object and are triggered when the HTML document is fully loaded or parsed.